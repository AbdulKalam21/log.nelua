--[[--------------------------------------------------------------------------------
-   MIT License                                                                    -
-                                                                                  -
-   Copyright (c) 2021 AKDev                                                       -
-                                                                                  -
-   Permission is hereby granted, free of charge, to any person obtaining a copy   -
-   of this software and associated documentation files (the "Software"), to deal  -
-   in the Software without restriction, including without limitation the rights   -
-   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      -
-   copies of the Software, and to permit persons to whom the Software is          -
-   furnished to do so, subject to the following conditions:                       -
-                                                                                  -
-   The above copyright notice and this permission notice shall be included in all -
-   copies or substantial portions of the Software.                                -
-                                                                                  -
-   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     -
-   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       -
-   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    -
-   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         -
-   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  -
-   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  -
-   SOFTWARE.                                                                      -
----------------------------------------------------------------------------------]]

require "os"    -- required for date and time
require "io"    -- required for printing to the console and writing to a text file

global log = @record{}        -- global namespace for the the logger

local COLORS = @record{}      -- local namespace for the colors
global COLORS.RED: string = "\x1B[31m"
global COLORS.YELLOW: string = "\x1b[33m"
global COLORS.GREEN: string = "\x1B[32m"
global COLORS.BLUE: string = "\x1b[36m"
global COLORS.GRAY: string = "\x1b[90m"
global COLORS.RESET: string = "\x1B[0m"

local logFile: filestream     -- file for logging

-- A function for concenating varargs
local function concatenateVarargs(...: varargs): string
    local varargs: string
    ##for i = 1 , select("#", ...) do
            varargs = varargs .. #[select(i, ...)]#
    ##end
    return varargs
end

-- A function which takes varags as argument, writes to the console
local function writeToFile(...: varargs): void
    logFile:write(...)
    logFile:flush()
end

-- A function which takes varargs as argument, writes to a file
local function writeToConsole(...: varargs): void
    io.write(...)
    io.flush()
end

##if not DISABLE_LOG_FILE then
    logFile = io.open("log.txt", "w+")
##end

##if not DISABLE_LOG_ERROR then
    -- a functions which takes varargs as argument, prints/writes the varargs to the console/file with colors and source location
    function log.error(...: varargs): void <alwayspoly>
        local time: string = os.date("%H:%M:%S ")
        local sourceLocation: string = (#[polysrcloc.srcname .. ":".. polysrcloc.lineno .. ": "]#)
        local error: string = concatenateVarargs(...)
    
        ##if not DISABLE_LOG_FILE then
            writeToFile(time, "[ERROR] ", sourceLocation, error, "\n")
        ##end

        ##if not DISABLE_LOG_COLOR then
            writeToConsole(time, COLORS.RED, "[ERROR] ", COLORS.GRAY, sourceLocation, COLORS.RESET, error, "\n")
        ##else
            writeToConsole(time, "[ERROR] ", sourceLocation, error, "\n")
        ##end
    end

##else
    function log.error(...: varargs): void    end
##end

##if not DISABLE_LOG_WARN then
    -- a functions which takes varargs as argument, prints/writes the varargs to the console/file with colors and source location
    function log.warn(...: varargs): void <alwayspoly>    
        local time: string = os.date("%H:%M:%S ")
        local sourceLocation: string = (#[polysrcloc.srcname .. ":".. polysrcloc.lineno .. ": "]#)
        local warn: string = concatenateVarargs(...)
    
        ##if not DISABLE_LOG_FILE then
            writeToFile(time, "[WARN]  ", sourceLocation, warn, "\n")
        ##end
        
        ##if not DISABLE_LOG_COLOR then
            writeToConsole(time, COLORS.YELLOW, "[WARN]  ", COLORS.GRAY, sourceLocation, COLORS.RESET, warn, "\n")
        ##else
            writeToConsole(time, "[WARN]  ", sourceLocation, warn, "\n")
        ##end
    end
##else
    function log.warn(...: varargs): void    end
##end

##if not DISABLE_LOG_INFO then
    -- a functions which takes varargs as argument, prints/writes the varargs to the console/file with colors and source location
    function log.info(...: varargs): void <alwayspoly>
        
        local time: string = os.date("%H:%M:%S ")
        local sourceLocation: string = (#[polysrcloc.srcname .. ":".. polysrcloc.lineno .. ": "]#)
        local warn: string = concatenateVarargs(...)
        
        ##if not DISABLE_LOG_FILE then
            writeToFile(time, "[INFO]  ", sourceLocation, info, "\n")
        ##end
        
        ##if not DISABLE_LOG_COLOR then
            writeToConsole(time, COLORS.GREEN, "[INFO]  ", COLORS.GRAY, sourceLocation, COLORS.RESET, info, "\n")
        ##else
            writeToConsole(time, "[INFO]  ", sourceLocation, info, "\n")
        ##end
    end

##else
    function log.info(...: varargs): void    end
##end

##if not DISABLE_LOG_DEBUG then
    -- a functions which takes varargs as argument, prints/writes the varargs to the console/file with colors and source location
    function log.debug(...: varargs): void <alwayspoly>
        
        local time: string = os.date("%H:%M:%S ")
        local sourceLocation: string = (#[polysrcloc.srcname .. ":".. polysrcloc.lineno .. ": "]#)
        local warn: string = concatenateVarargs(...)
        
        ##if not DISABLE_LOG_FILE then
            writeToFile(time, "[DEBUG] ", sourceLocation, debug, "\n")
        ##end
        
        ##if not DISABLE_LOG_COLOR then
            writeToConsole(time, COLORS.BLUE, "[DEBUG] ", COLORS.GRAY, sourceLocation, COLORS.RESET, debug, "\n")
        ##else
            writeToConsole(time, "[DEBUG] ", sourceLocation, debug, "\n")
        ##end
    end
    
##else
    function log.debug(...: varargs): void    end
##end
